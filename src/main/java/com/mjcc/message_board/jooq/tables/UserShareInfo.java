/*
 * This file is generated by jOOQ.
 */
package com.mjcc.message_board.jooq.tables;


import com.mjcc.message_board.jooq.Indexes;
import com.mjcc.message_board.jooq.Keys;
import com.mjcc.message_board.jooq.Public;
import com.mjcc.message_board.jooq.tables.records.UserShareInfoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 用户分享信息表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserShareInfo extends TableImpl<UserShareInfoRecord> {

    private static final long serialVersionUID = 1183383199;

    /**
     * The reference instance of <code>public.user_share_info</code>
     */
    public static final UserShareInfo USER_SHARE_INFO = new UserShareInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserShareInfoRecord> getRecordType() {
        return UserShareInfoRecord.class;
    }

    /**
     * The column <code>public.user_share_info.share_openid</code>. 用户的openid
     */
    public final TableField<UserShareInfoRecord, String> SHARE_OPENID = createField("share_openid", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "用户的openid");

    /**
     * The column <code>public.user_share_info.share_status</code>. 用户的分享状态
     */
    public final TableField<UserShareInfoRecord, Short> SHARE_STATUS = createField("share_status", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "用户的分享状态");

    /**
     * The column <code>public.user_share_info.target_one</code>. 用户目标1
     */
    public final TableField<UserShareInfoRecord, String> TARGET_ONE = createField("target_one", org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "用户目标1");

    /**
     * The column <code>public.user_share_info.target_two</code>. 用户的目标2
     */
    public final TableField<UserShareInfoRecord, String> TARGET_TWO = createField("target_two", org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "用户的目标2");

    /**
     * The column <code>public.user_share_info.target_three</code>. 用户的目标3
     */
    public final TableField<UserShareInfoRecord, String> TARGET_THREE = createField("target_three", org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "用户的目标3");

    /**
     * The column <code>public.user_share_info.create_time</code>. 创建时间
     */
    public final TableField<UserShareInfoRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * Create a <code>public.user_share_info</code> table reference
     */
    public UserShareInfo() {
        this(DSL.name("user_share_info"), null);
    }

    /**
     * Create an aliased <code>public.user_share_info</code> table reference
     */
    public UserShareInfo(String alias) {
        this(DSL.name(alias), USER_SHARE_INFO);
    }

    /**
     * Create an aliased <code>public.user_share_info</code> table reference
     */
    public UserShareInfo(Name alias) {
        this(alias, USER_SHARE_INFO);
    }

    private UserShareInfo(Name alias, Table<UserShareInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserShareInfo(Name alias, Table<UserShareInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户分享信息表"));
    }

    public <O extends Record> UserShareInfo(Table<O> child, ForeignKey<O, UserShareInfoRecord> key) {
        super(child, key, USER_SHARE_INFO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_SHARE_INFO_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserShareInfoRecord> getPrimaryKey() {
        return Keys.USER_SHARE_INFO_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserShareInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<UserShareInfoRecord>>asList(Keys.USER_SHARE_INFO_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserShareInfo as(String alias) {
        return new UserShareInfo(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserShareInfo as(Name alias) {
        return new UserShareInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserShareInfo rename(String name) {
        return new UserShareInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserShareInfo rename(Name name) {
        return new UserShareInfo(name, null);
    }
}
